//
//  QuestionPage.swift
<<<<<<< HEAD
//  
=======
//  VirusCare
>>>>>>> c7a36beaa45dc0fbc21a46000886702b9c630889
//
//  Created by Behrad Kazemi on 3/22/20.
//

<<<<<<< HEAD
import UIKit

class QuestionPage: UIViewController {
	
	var index = 0
	let viewModel: QuestionPageViewModel
	var currentModel: QuestionViewModel! {
		return viewModel.models.count > index ? viewModel.models[index] : .init(model: .defaultModel)
	}
	//
	init(viewModel: QuestionPageViewModel) {
		self.viewModel = viewModel
		super.init(nibName: "QuestionPage", bundle: nil)
	}
	
	required init?(coder: NSCoder) {
		fatalError("init(coder:) has not been implemented")
	}
	
	@IBOutlet weak var noLabel: UILabel!
	@IBOutlet weak var yesLabel: UILabel!
	@IBOutlet weak var questionImageView: UIImageView!
	@IBOutlet weak var titleLabel: UILabel!
	@IBOutlet weak var yesButton: UIButton!
	@IBOutlet weak var noButton: UIButton!
	@IBOutlet weak var visualEffectView: UIVisualEffectView!
	
	override func viewDidLoad() {
		super.viewDidLoad()
		refreshUI()
		// Do any additional setup after loading the view.
	}
	override func viewWillAppear(_ animated: Bool) {
		super.viewWillAppear(animated)
		yesButton.layer.cornerRadius = 8
		noButton.layer.cornerRadius = 8
		noLabel.layer.borderColor = UIColor.lightGray.cgColor
		noLabel.layer.borderWidth = 0.5
		noLabel.layer.cornerRadius = 8
	}

	func refreshUI() {
		guard let selectedViewModelItem = viewModel.models.count > index ? viewModel.models[index] : nil else {
			viewModel.navigator.questionsCompleted()
=======
import SwiftUI

struct QuestionPage: View, Identifiable {
  
  let id = UUID()
  @State var index = 0
  let viewModel: QuestionPageViewModel
  @State var currentModel = QuestionViewModel(model: QuestionModel.defaultModel)
  init(viewModel: QuestionPageViewModel) {
    self.viewModel = viewModel
    self.currentModel = viewModel.models.first!
  }
  
  var body: some View {
    GeometryReader{ geometry in
      
      VStack {
        VStack(alignment: .center, spacing: 16) {
          
          Image(self.currentModel.imageName)
            
            .resizable()
            .aspectRatio(contentMode: .fit)
            .frame(width: geometry.size.width / 2, height: geometry.size.width / 2, alignment: .center)
            .clipShape(Rectangle())
          .onDisappear(perform: {
            self.showHomepage()
          })
          Text(self.currentModel.title)
            .font(.title)
            .bold()
            .lineLimit(nil)
            .multilineTextAlignment(.center)
          
        }.padding()
        Spacer()
        HStack() {
          
          Group {
            Button(action: { 
              self.viewModel.setAnswer(answer: .no, forViewModel: self.currentModel)
              self.nextQuestion()
            }) {
              Text(self.currentModel.ignoreButtonTitle)
                .font(Font.subheadline)
                .offset(y: 1)
                .foregroundColor(Color.gray)
                .padding(.horizontal, 20)
                .padding(.vertical, 14)
              
            }.frame(minWidth: 0, maxWidth: .infinity)
              .overlay(
                RoundedRectangle(cornerRadius: 8)
                  .stroke(Color.gray, lineWidth: 1)
            )
            
            
            
            Button(action: {
              self.viewModel.setAnswer(answer: .done, forViewModel: self.currentModel)
              self.nextQuestion()
            }) {
              Text(self.currentModel.acceptButtonTitle)
                .font(Font.subheadline)
                .fontWeight(.heavy)
                .multilineTextAlignment(.center)
                .offset(y: 1)
                .padding(.horizontal, 20)
                .padding(.vertical, 14).foregroundColor(Color.white)
            }
            .frame(minWidth: 0, maxWidth: .infinity)
            .background(Color(hex: "60d42a"))
            .cornerRadius(8)
            
          }.frame(minWidth: 0, maxWidth: .infinity)
        }.padding().frame(width: geometry.size.width)
        
      }.padding(EdgeInsets(top: geometry.size.height / 8, leading: 0, bottom: 16, trailing: 0))
    }
  }
  func showHomepage() {
    viewModel.navigator.questionsCompleted()
  }
  func nextQuestion(){
		Vibrator.vibrate(hardness: 2)
    self.index += 1
    if self.viewModel.models.count <= self.index {
      self.viewModel.navigator.questionsCompleted()
>>>>>>> c7a36beaa45dc0fbc21a46000886702b9c630889
			return
		}
		UIView.animate(withDuration: 0.5) {
			self.questionImageView.image = UIImage(named: selectedViewModelItem.imageName)
			self.titleLabel.text = selectedViewModelItem.title
			self.yesLabel.text = selectedViewModelItem.acceptButtonTitle
			self.noLabel.text = selectedViewModelItem.ignoreButtonTitle
		}
	}
	func nextQuestion(){
		
		index = index + 1
		refreshUI()
	}
	@IBAction func noAction(_ sender: Any) {
		viewModel.setAnswer(answer: .no, forViewModel: currentModel)
		let eventId = currentModel.model.event.asEventProtocol().id
		viewModel.models.forEach { (item) in
			if eventId == item.model.event.asEventProtocol().id {
				viewModel.setAnswer(answer: .no, forViewModel: item)
			}
		}
		viewModel.models.removeAll { (item) -> Bool in
			return eventId == item.model.event.asEventProtocol().id
		}
		nextQuestion()
		Vibrator.vibrate(hardness: 1)
	}
	@IBAction func yesAction(_ sender: Any) {
		viewModel.setAnswer(answer: .done, forViewModel: currentModel)
		let eventId = currentModel.model.event.asEventProtocol().id
		viewModel.models.forEach { (item) in
			if eventId == item.model.event.asEventProtocol().id {
				viewModel.setAnswer(answer: .done, forViewModel: item)
			}
		}
		viewModel.models.removeAll { (item) -> Bool in
			return eventId == item.model.event.asEventProtocol().id
		}
		nextQuestion()
		Vibrator.vibrate(hardness: 2)
	}
}
