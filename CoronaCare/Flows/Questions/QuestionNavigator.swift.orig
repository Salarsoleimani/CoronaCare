//
//  QuestionNavigator.swift
//  VirusCare
//
//  Created by Behrad Kazemi on 3/10/20.
//  Copyright Â© 2020 BEKApps. All rights reserved.
//

import UIKit
import Domain
import SwiftUI
import GoogleMobileAds

final class QuestionNavigator: Navigator {
  var rewardedAd: GADRewardedAd?
  
  let dataBaseServices: DataBaseManagerInterface
  init(navigationController: UINavigationController, dataBase: DataBaseManagerInterface) {
    self.dataBaseServices = dataBase
    super.init(navigationController: navigationController)
  }
  private func setupGoogleAd() {
    rewardedAd = createAndLoadRewardedAd()
  }
  private func createAndLoadRewardedAd() -> GADRewardedAd? {
    rewardedAd = GADRewardedAd(adUnitID: testAdRewardedVideoUnitID) // [TODO] -force change to adRewardedQuestion
    rewardedAd?.load(GADRequest()) { error in
      if let error = error {
        print("Loading ad failed: \(error)")
      } else {
        print("Loading ad Succeeded")
      }
    }
    return rewardedAd
  }
  func setup(errorHandler: (Error) -> Void) {
    setupGoogleAd()
    dataBaseServices.getNotificationLogs(forAnswerType: .noAnswer, beforeDate: Date(), response: { [load](items) in
      let questions = items.compactMap { (log) -> QuestionModel in
        return log.eventId.asEventType().asEventProtocol().makeQuestion(withNotificationId: log.id)
      }
      load(questions)
    }) { [errorHandler, logError] (error) in
      errorHandler(error)
      //      if error
      //      logError(error, "Question", "")
    }
  }
  private func load(withQuestionModels models: [QuestionModel]) {
    let viewModels = models.compactMap { (item) -> QuestionViewModel in
      return QuestionViewModel(model: item)
    }
    let questionViewModel = QuestionPageViewModel(models: viewModels, dataBase: dataBaseServices, navigator: self)
    let viewController = QuestionPage(viewModel: questionViewModel)
    
    if let parentVC = navigationController.viewControllers.last?.presentedViewController ?? navigationController.viewControllers.last, !(parentVC is UITabBarController) {
      
      parentVC.present(viewController, animated: true, completion: nil)
      return
    }
    navigationController.pushViewController(viewController, animated: true)
  }
  func showRewardedAd() -> UIViewController? {
    if let parentVC = navigationController.viewControllers.last?.presentedViewController ?? navigationController.viewControllers.last, !(parentVC is UITabBarController) {
<<<<<<< HEAD
			if parentVC is QuestionPage {
				parentVC.dismiss(animated: true) {
					self.toHomeWithAds()
				}
			}
    }
    navigationController.popViewController(animated: true)
  }
	
	func toHomeWithAds() {
	
		navigationController.navigationBar.setBackgroundImage(UIImage(), for: .default)
		
		
		if rewardedAd?.isReady == true {
			toTabbar { [rewardedAd, unowned self](presentingVC) in
				rewardedAd?.present(fromRootViewController: presentingVC, delegate: self)
			}
			return
		}
		toTabbar()

	}
}

extension QuestionNavigator: GADRewardedAdDelegate {
  func rewardedAd(_ rewardedAd: GADRewardedAd, userDidEarn reward: GADAdReward) {
    AppAnalytics.shared.countUpRewardAdInQuestion()
=======
      if rewardedAd?.isReady == true {
        rewardedAd?.present(fromRootViewController: parentVC, delegate: self)
      }
      return parentVC
    }
    return nil
  }
  func questionsCompleted() {
    let vc = showRewardedAd()
    if let vc = vc, vc is UIHostingController<QuestionPage> {
      vc.dismiss(animated: true) { [toTabbar] in
        toTabbar()
      }
    }
    navigationController.popViewController(animated: true)
  }
}
/// Google ad delegates for question page
extension QuestionNavigator: GADRewardedAdDelegate {
  func rewardedAd(_ rewardedAd: GADRewardedAd, userDidEarn reward: GADAdReward) {
    AppAnalytics.shared.countUpRewardAd()
>>>>>>> c7a36beaa45dc0fbc21a46000886702b9c630889
  }
  func rewardedAdDidDismiss(_ rewardedAd: GADRewardedAd) {
    self.rewardedAd = createAndLoadRewardedAd()
  }
}
